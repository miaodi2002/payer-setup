AWSTemplateFormatVersion: '2010-09-09'
Description: "Create AWS Account and BillingConductor BillingGroup automatically"

Resources:
  # Lambda执行角色
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaBillingConductorRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: OrganizationsAndBillingAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - organizations:DescribeOrganization
                  - organizations:DescribeAccount
                  - organizations:CreateAccount
                  - organizations:DescribeCreateAccountStatus
                  - organizations:ListAccounts
                  - billingconductor:CreateBillingGroup
                  - billingconductor:AssociatePricingRules
                  - billingconductor:ListBillingGroups
                  - billingconductor:ListPricingPlans
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Lambda函数
  CreateAccountAndBillingGroupFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CreateAccountAndBillingGroup
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 900  # 15分钟，账户创建可能需要较长时间
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import time
          import re

          def lambda_handler(event, context):
              try:
                  if event['RequestType'] == 'Delete':
                      # 删除时不做任何操作，避免删除已创建的账户
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return

                  organizations = boto3.client('organizations')
                  billingconductor = boto3.client('billingconductor')

                  # 1. 获取Management Account信息
                  org_info = organizations.describe_organization()
                  master_account_id = org_info['Organization']['MasterAccountId']
                  
                  master_account_info = organizations.describe_account(AccountId=master_account_id)
                  master_account_name = master_account_info['Account']['Name']
                  master_account_email = master_account_info['Account']['Email']

                  print(f"Master Account: {master_account_name} ({master_account_email})")

                  # 2. 检查是否已存在Bills账户
                  new_account_name = f"{master_account_name}-Bills"
                  base_email = generate_bills_email(master_account_email)
                  
                  # 3. 查找现有的Bills账户
                  existing_account = find_existing_bills_account(organizations, master_account_name, master_account_email)
                  
                  if existing_account:
                      new_account_id = existing_account['Id']
                      new_account_email = existing_account['Email']
                      print(f"Found existing Bills account: {existing_account['Name']} ({new_account_email}) - ID: {new_account_id}")
                  else:
                      # 4. 如果不存在，查找可用邮箱并创建新账户
                      new_account_email = find_available_email(organizations, base_email)
                      
                      print(f"No existing Bills account found. Creating new account: {new_account_name} ({new_account_email})")

                      # 5. 创建新账户
                      create_response = organizations.create_account(
                          Email=new_account_email,
                          AccountName=new_account_name
                      )
                      
                      request_id = create_response['CreateAccountStatus']['Id']
                      print(f"Account creation request ID: {request_id}")

                      # 6. 等待账户创建完成
                      new_account_id = wait_for_account_creation(organizations, request_id)
                      print(f"New account created: {new_account_id}")

                  # 7. 创建或查找BillingGroup
                  billing_group_arn = create_or_find_billing_group(billingconductor, new_account_id)
                  print(f"BillingGroup ready: {billing_group_arn}")

                  response_data = {
                      "NewAccountId": new_account_id,
                      "NewAccountEmail": new_account_email,
                      "BillingGroupArn": billing_group_arn,
                      "Message": "Account and BillingGroup created successfully"
                  }

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})

          def generate_bills_email(original_email):
              """生成+bills邮箱alias"""
              if '+' in original_email:
                  # 如果已经有alias，在@前添加bills
                  local, domain = original_email.split('@')
                  return f"{local}bills@{domain}"
              else:
                  # 没有alias，添加+bills
                  local, domain = original_email.split('@')
                  return f"{local}+bills@{domain}"

          def find_existing_bills_account(organizations, master_account_name, master_account_email):
              """查找现有的Bills账户"""
              try:
                  accounts = organizations.list_accounts()['Accounts']
                  
                  # 生成可能的Bills账户名称模式
                  possible_names = [
                      f"{master_account_name}-Bills",
                      f"{master_account_name}Bills",
                      f"Bills-{master_account_name}",
                      f"Bills{master_account_name}"
                  ]
                  
                  # 生成可能的邮箱模式
                  local_part, domain = master_account_email.split('@')
                  possible_emails = []
                  
                  # 基础+bills模式
                  possible_emails.append(f"{local_part}+bills@{domain}")
                  
                  # 带数字后缀的模式
                  for i in range(1, 10):  # 检查1-9的后缀
                      possible_emails.append(f"{local_part}+bills{i}@{domain}")
                      possible_emails.append(f"{local_part}bills{i}@{domain}")
                  
                  # 不带+的模式
                  possible_emails.append(f"{local_part}bills@{domain}")
                  
                  print(f"Searching for existing Bills accounts with names: {possible_names}")
                  print(f"Searching for existing Bills accounts with emails: {possible_emails[:5]}... (and more variations)")
                  
                  for account in accounts:
                      account_name = account.get('Name', '')
                      account_email = account.get('Email', '').lower()
                      account_status = account.get('Status', '')
                      
                      # 跳过管理账户
                      if account.get('Id') == account.get('MasterAccountId', ''):
                          continue
                      
                      # 跳过非活跃账户
                      if account_status != 'ACTIVE':
                          print(f"Skipping account {account_name} - Status: {account_status}")
                          continue
                      
                      # 检查账户名称是否匹配
                      name_match = any(possible_name.lower() in account_name.lower() or 
                                     account_name.lower() in possible_name.lower() 
                                     for possible_name in possible_names)
                      
                      # 检查邮箱是否匹配
                      email_match = any(possible_email.lower() == account_email 
                                      for possible_email in possible_emails)
                      
                      # 检查是否包含bills关键词
                      bills_in_name = 'bills' in account_name.lower()
                      bills_in_email = 'bills' in account_email
                      
                      if name_match or email_match or (bills_in_name and bills_in_email):
                          print(f"Found potential Bills account: {account_name} ({account['Email']}) - ID: {account['Id']}")
                          
                          # 进一步验证：确保不是其他用途的账户
                          if ('bills' in account_name.lower() or 'bills' in account_email) and account_status == 'ACTIVE':
                              print(f"Confirmed Bills account: {account_name}")
                              return account
                  
                  print("No existing Bills account found")
                  return None
                  
              except Exception as e:
                  print(f"Error searching for existing Bills account: {str(e)}")
                  return None

          def find_available_email(organizations, base_email):
              """查找可用的邮箱地址"""
              # 获取所有现有账户
              accounts = organizations.list_accounts()['Accounts']
              existing_emails = {acc['Email'].lower() for acc in accounts}
              
              # 检查基础邮箱是否可用
              if base_email.lower() not in existing_emails:
                  return base_email
              
              # 如果不可用，添加数字后缀
              local, domain = base_email.split('@')
              if '+bills' in local:
                  base_local = local  # service+bills
              else:
                  base_local = local.replace('bills', '+bills')  # servicebills -> service+bills
              
              for i in range(1, 100):  # 最多尝试99次
                  test_email = f"{base_local}{i}@{domain}"
                  if test_email.lower() not in existing_emails:
                      return test_email
              
              raise Exception("Cannot find available email after 99 attempts")

          def wait_for_account_creation(organizations, request_id):
              """等待账户创建完成"""
              max_attempts = 60  # 最多等待30分钟 (60 * 30秒)
              
              for attempt in range(max_attempts):
                  time.sleep(30)  # 等待30秒
                  
                  status = organizations.describe_create_account_status(
                      CreateAccountRequestId=request_id
                  )
                  
                  state = status['CreateAccountStatus']['State']
                  print(f"Account creation attempt {attempt + 1}: {state}")
                  
                  if state == 'SUCCEEDED':
                      return status['CreateAccountStatus']['AccountId']
                  elif state == 'FAILED':
                      failure_reason = status['CreateAccountStatus'].get('FailureReason', 'Unknown')
                      raise Exception(f"Account creation failed: {failure_reason}")
              
              raise Exception("Account creation timeout after 30 minutes")

          def create_or_find_billing_group(billingconductor, primary_account_id):
              """创建或查找现有的BillingGroup"""
              try:
                  # 首先检查是否已存在Bills BillingGroup
                  print(f"Checking for existing BillingGroups for account {primary_account_id}")
                  
                  existing_groups = billingconductor.list_billing_groups()
                  
                  for group in existing_groups.get('BillingGroups', []):
                      group_name = group.get('Name', '')
                      group_primary_account = group.get('PrimaryAccountId', '')
                      
                      print(f"Found BillingGroup: {group_name} (Primary: {group_primary_account})")
                      
                      # 检查是否是我们要找的Bills组，且Primary Account匹配
                      if (group_name.lower() == 'bills' and group_primary_account == primary_account_id):
                          print(f"Found existing Bills BillingGroup: {group['Arn']}")
                          return group['Arn']
                      
                      # 检查是否Primary Account相同但名称不同（可能需要更新）
                      if group_primary_account == primary_account_id:
                          print(f"Found BillingGroup with same Primary Account but different name: {group_name}")
                          print(f"Using existing BillingGroup: {group['Arn']}")
                          return group['Arn']
                  
                  # 如果没有找到现有的BillingGroup，创建新的
                  print(f"No existing BillingGroup found for account {primary_account_id}. Creating new one.")
                  return create_billing_group(billingconductor, primary_account_id)
                  
              except Exception as e:
                  print(f"Error in create_or_find_billing_group: {str(e)}")
                  # 如果列表操作失败，尝试直接创建
                  print("Falling back to direct creation")
                  return create_billing_group(billingconductor, primary_account_id)

          def create_billing_group(billingconductor, primary_account_id):
              """创建BillingGroup"""
              try:
                  # 首先列出可用的 pricing plans 来获取正确的 ARN
                  pricing_plans = billingconductor.list_pricing_plans()
                  print(f"Available pricing plans: {pricing_plans}")
                  
                  # 查找标准定价计划
                  standard_plan_arn = None
                  for plan in pricing_plans.get('PricingPlans', []):
                      if 'standard' in plan.get('Name', '').lower() or 'aws' in plan.get('Name', '').lower():
                          standard_plan_arn = plan.get('Arn')
                          print(f"Found standard pricing plan: {standard_plan_arn}")
                          break
                  
                  # 如果没有找到标准计划，使用第一个可用的计划
                  if not standard_plan_arn and pricing_plans.get('PricingPlans'):
                      standard_plan_arn = pricing_plans['PricingPlans'][0].get('Arn')
                      print(f"Using first available pricing plan: {standard_plan_arn}")
                  
                  if not standard_plan_arn:
                      # 如果还是没有找到，尝试不使用 ComputationPreference
                      print("No pricing plan found, creating BillingGroup without ComputationPreference")
                      response = billingconductor.create_billing_group(
                          Name='Bills',
                          Description='Billing group for customer original pricing',
                          PrimaryAccountId=primary_account_id,
                          AccountGrouping={
                              'LinkedAccountIds': [primary_account_id]
                          }
                      )
                  else:
                      response = billingconductor.create_billing_group(
                          Name='Bills',
                          Description='Billing group for customer original pricing',
                          PrimaryAccountId=primary_account_id,
                          AccountGrouping={
                              'LinkedAccountIds': [primary_account_id]
                          },
                          ComputationPreference={
                              'PricingPlanArn': standard_plan_arn
                          }
                      )
                  
                  return response['Arn']
              except Exception as e:
                  print(f"BillingGroup creation error: {str(e)}")
                  raise

  # Custom Resource触发Lambda
  CreateAccountAndBillingGroup:
    Type: Custom::CreateAccountAndBillingGroup
    Properties:
      ServiceToken: !GetAtt CreateAccountAndBillingGroupFunction.Arn

Outputs:
  NewAccountId:
    Description: "ID of the newly created account"
    Value: !GetAtt CreateAccountAndBillingGroup.NewAccountId
    Export:
      Name: !Sub "${AWS::StackName}-NewAccountId"

  NewAccountEmail:
    Description: "Email of the newly created account"
    Value: !GetAtt CreateAccountAndBillingGroup.NewAccountEmail
    Export:
      Name: !Sub "${AWS::StackName}-NewAccountEmail"

  BillingGroupArn:
    Description: "ARN of the created BillingGroup"
    Value: !GetAtt CreateAccountAndBillingGroup.BillingGroupArn
    Export:
      Name: !Sub "${AWS::StackName}-BillingGroupArn"