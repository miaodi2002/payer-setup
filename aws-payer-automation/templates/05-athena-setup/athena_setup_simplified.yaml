AWSTemplateFormatVersion: '2010-09-09'
Description: "Simplified Athena environment setup for CUR data analysis - supports both Pro forma and RISP CUR"

Parameters:
  ProformaBucketName:
    Type: String
    Description: "S3 bucket name for Pro forma CUR data"
  
  RISPBucketName:
    Type: String
    Description: "S3 bucket name for RISP CUR data"
    
  ProformaReportName:
    Type: String
    Description: "Pro forma CUR report name (Master Account ID)"
    
  RISPReportName:
    Type: String
    Description: "RISP CUR report name"

Resources:
  # Glue执行角色
  GlueCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: S3CURAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${ProformaBucketName}"
                  - !Sub "arn:aws:s3:::${ProformaBucketName}/*"
                  - !Sub "arn:aws:s3:::${RISPBucketName}"
                  - !Sub "arn:aws:s3:::${RISPBucketName}/*"

  # Lambda执行角色
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: GlueAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - organizations:DescribeOrganization
                  - glue:CreateDatabase
                  - glue:CreateCrawler
                  - glue:GetDatabase
                  - glue:GetCrawler
                  - glue:StartCrawler
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt GlueCrawlerRole.Arn

  # Lambda函数：创建Athena环境
  CreateAthenaEnvironmentFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          def lambda_handler(event, context):
              try:
                  if event['RequestType'] == 'Delete':
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return

                  organizations = boto3.client('organizations')
                  glue = boto3.client('glue')

                  # 获取参数
                  proforma_bucket = event['ResourceProperties']['ProformaBucketName']
                  risp_bucket = event['ResourceProperties']['RISPBucketName']
                  proforma_report = event['ResourceProperties']['ProformaReportName']
                  risp_report = event['ResourceProperties']['RISPReportName']
                  crawler_role_arn = event['ResourceProperties']['CrawlerRoleArn']

                  # 获取Account ID
                  org_info = organizations.describe_organization()
                  account_id = org_info['Organization']['MasterAccountId']

                  print(f"Setting up Athena for Account: {account_id}")

                  # 1. 创建Glue Database
                  database_name = f"athenacurcfn_{account_id}"
                  try:
                      glue.get_database(Name=database_name)
                      print(f"Database {database_name} already exists")
                  except glue.exceptions.EntityNotFoundException:
                      glue.create_database(
                          DatabaseInput={
                              'Name': database_name,
                              'Description': f'Database for CUR data analysis - Account {account_id}'
                          }
                      )
                      print(f"Created database: {database_name}")

                  # 2. 创建Glue Crawlers
                  proforma_crawler_name = f"AWSCURCrawler-{account_id}"
                  risp_crawler_name = f"AWSRISPCURCrawler-{account_id}"
                  
                  # 创建Pro forma Crawler
                  try:
                      glue.get_crawler(Name=proforma_crawler_name)
                      print(f"Crawler {proforma_crawler_name} already exists")
                  except glue.exceptions.EntityNotFoundException:
                      glue.create_crawler(
                          Name=proforma_crawler_name,
                          Role=crawler_role_arn,
                          DatabaseName=database_name,
                          Description=f'Crawler for Pro forma CUR data in {proforma_bucket}',
                          Targets={
                              'S3Targets': [
                                  {
                                      'Path': f"s3://{proforma_bucket}/daily/{proforma_report}/",
                                      'Exclusions': ['**.json', '**.yml', '**.sql', '**.csv', '**.gz', '**.zip']
                                  }
                              ]
                          },
                          SchemaChangePolicy={
                              'UpdateBehavior': 'UPDATE_IN_DATABASE',
                              'DeleteBehavior': 'LOG'
                          }
                      )
                      print(f"Created crawler: {proforma_crawler_name}")

                  # 创建RISP Crawler
                  try:
                      glue.get_crawler(Name=risp_crawler_name)
                      print(f"Crawler {risp_crawler_name} already exists")
                  except glue.exceptions.EntityNotFoundException:
                      glue.create_crawler(
                          Name=risp_crawler_name,
                          Role=crawler_role_arn,
                          DatabaseName=database_name,
                          Description=f'Crawler for RISP CUR data in {risp_bucket}',
                          Targets={
                              'S3Targets': [
                                  {
                                      'Path': f"s3://{risp_bucket}/daily/{risp_report}/",
                                      'Exclusions': ['**.json', '**.yml', '**.sql', '**.csv', '**.gz', '**.zip']
                                  }
                              ]
                          },
                          SchemaChangePolicy={
                              'UpdateBehavior': 'UPDATE_IN_DATABASE',
                              'DeleteBehavior': 'LOG'
                          }
                      )
                      print(f"Created crawler: {risp_crawler_name}")

                  # 3. 启动初始爬取
                  try:
                      glue.start_crawler(Name=proforma_crawler_name)
                      print(f"Started crawler: {proforma_crawler_name}")
                  except Exception as e:
                      print(f"Initial crawl start error for {proforma_crawler_name}: {str(e)}")

                  try:
                      glue.start_crawler(Name=risp_crawler_name)
                      print(f"Started crawler: {risp_crawler_name}")
                  except Exception as e:
                      print(f"Initial crawl start error for {risp_crawler_name}: {str(e)}")

                  response_data = {
                      "DatabaseName": database_name,
                      "ProformaCrawlerName": proforma_crawler_name,
                      "RISPCrawlerName": risp_crawler_name,
                      "Message": "Athena environment created successfully"
                  }

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})

  # Custom Resource触发Lambda
  CreateAthenaEnvironment:
    Type: Custom::CreateAthenaEnvironment
    Properties:
      ServiceToken: !GetAtt CreateAthenaEnvironmentFunction.Arn
      ProformaBucketName: !Ref ProformaBucketName
      RISPBucketName: !Ref RISPBucketName
      ProformaReportName: !Ref ProformaReportName
      RISPReportName: !Ref RISPReportName
      CrawlerRoleArn: !GetAtt GlueCrawlerRole.Arn

Outputs:
  DatabaseName:
    Description: "Glue database name for CUR data"
    Value: !GetAtt CreateAthenaEnvironment.DatabaseName
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseName"

  ProformaCrawlerName:
    Description: "Pro forma CUR crawler name"
    Value: !GetAtt CreateAthenaEnvironment.ProformaCrawlerName
    Export:
      Name: !Sub "${AWS::StackName}-ProformaCrawlerName"

  RISPCrawlerName:
    Description: "RISP CUR crawler name"
    Value: !GetAtt CreateAthenaEnvironment.RISPCrawlerName
    Export:
      Name: !Sub "${AWS::StackName}-RISPCrawlerName"