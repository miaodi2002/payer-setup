AWSTemplateFormatVersion: '2010-09-09'
Description: "Create Legacy CUR Export with Pro forma configuration"

Parameters:
  BillingGroupArn:
    Type: String
    Description: "ARN of the BillingGroup created in previous step"

Resources:
  # Lambda执行角色
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaCURExportRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CURAndS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - organizations:DescribeOrganization
                  - organizations:DescribeAccount
                  - cur:PutReportDefinition
                  - cur:DescribeReportDefinitions
                  - cur:ModifyReportDefinition
                  - s3:CreateBucket
                  - s3:PutBucketPolicy
                  - s3:PutBucketPublicAccessBlock
                  - s3:PutBucketVersioning
                  - s3:GetBucketLocation
                  - s3:ListBucket
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Lambda函数
  CreateCURExportFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CreateLegacyCURExport
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import time

          def lambda_handler(event, context):
              try:
                  if event['RequestType'] == 'Delete':
                      # 删除时不删除S3 Bucket和CUR，避免数据丢失
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return

                  organizations = boto3.client('organizations')
                  cur = boto3.client('cur', region_name='us-east-1')  # CUR只能在us-east-1创建
                  s3 = boto3.client('s3', region_name='us-east-1')

                  billing_group_arn = event['ResourceProperties']['BillingGroupArn']

                  # 1. 获取Master Account ID
                  org_info = organizations.describe_organization()
                  master_account_id = org_info['Organization']['MasterAccountId']
                  
                  print(f"Master Account ID: {master_account_id}")

                  # 2. 创建S3 Bucket
                  bucket_name = f"bip-cur-{master_account_id}"
                  bucket_region = create_s3_bucket(s3, bucket_name)
                  
                  print(f"S3 Bucket created: {bucket_name} in {bucket_region}")

                  # 3. 设置S3 Bucket Policy
                  set_s3_bucket_policy(s3, bucket_name, master_account_id)
                  
                  # 4. 创建CUR Export
                  report_name = master_account_id
                  cur_arn = create_cur_export(cur, report_name, bucket_name, billing_group_arn)
                  
                  print(f"CUR Export created: {report_name}")

                  response_data = {
                      "BucketName": bucket_name,
                      "BucketRegion": bucket_region,
                      "ReportName": report_name,
                      "CURArn": cur_arn,
                      "Message": "Legacy CUR Export created successfully"
                  }

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})

          def create_s3_bucket(s3, bucket_name):
              """创建S3 Bucket"""
              try:
                  # 检查bucket是否已存在
                  try:
                      s3.head_bucket(Bucket=bucket_name)
                      print(f"Bucket {bucket_name} already exists")
                      return 'us-east-1'
                  except:
                      pass

                  # 创建bucket（在us-east-1，因为CUR需要）
                  s3.create_bucket(Bucket=bucket_name)
                  
                  # 设置公共访问阻止
                  s3.put_public_access_block(
                      Bucket=bucket_name,
                      PublicAccessBlockConfiguration={
                          'BlockPublicAcls': True,
                          'IgnorePublicAcls': True,
                          'BlockPublicPolicy': True,
                          'RestrictPublicBuckets': True
                      }
                  )
                  
                  # 启用版本控制
                  s3.put_bucket_versioning(
                      Bucket=bucket_name,
                      VersioningConfiguration={'Status': 'Enabled'}
                  )
                  
                  return 'us-east-1'
                  
              except Exception as e:
                  print(f"S3 bucket creation error: {str(e)}")
                  raise

          def set_s3_bucket_policy(s3, bucket_name, account_id):
              """设置S3 Bucket Policy允许CUR写入"""
              bucket_policy = {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Principal": {
                              "Service": "billingreports.amazonaws.com"
                          },
                          "Action": [
                              "s3:GetBucketAcl",
                              "s3:GetBucketPolicy"
                          ],
                          "Resource": f"arn:aws:s3:::{bucket_name}",
                          "Condition": {
                              "StringEquals": {
                                  "aws:SourceAccount": account_id
                              }
                          }
                      },
                      {
                          "Effect": "Allow",
                          "Principal": {
                              "Service": "billingreports.amazonaws.com"
                          },
                          "Action": "s3:PutObject",
                          "Resource": f"arn:aws:s3:::{bucket_name}/*",
                          "Condition": {
                              "StringEquals": {
                                  "aws:SourceAccount": account_id
                              }
                          }
                      }
                  ]
              }
              
              try:
                  s3.put_bucket_policy(
                      Bucket=bucket_name,
                      Policy=json.dumps(bucket_policy)
                  )
                  print(f"Bucket policy set for {bucket_name}")
              except Exception as e:
                  print(f"Bucket policy error: {str(e)}")
                  raise

          def create_cur_export(cur, report_name, bucket_name, billing_group_arn):
              """创建Legacy CUR Export"""
              try:
                  # 检查报告是否已存在
                  try:
                      existing_reports = cur.describe_report_definitions()
                      for report in existing_reports['ReportDefinitions']:
                          if report['ReportName'] == report_name:
                              print(f"CUR report {report_name} already exists")
                              return f"arn:aws:cur:us-east-1::report/{report_name}"
                  except:
                      pass

                  response = cur.put_report_definition(
                      ReportDefinition={
                          'ReportName': report_name,
                          'TimeUnit': 'DAILY',
                          'Format': 'Parquet',
                          'Compression': 'Parquet',
                          'AdditionalSchemaElements': ['RESOURCES'],
                          'S3Bucket': bucket_name,
                          'S3Prefix': 'daily',
                          'S3Region': 'us-east-1',
                          'AdditionalArtifacts': ['ATHENA'],
                          'RefreshClosedReports': True,
                          'ReportVersioning': 'OVERWRITE_REPORT',
                          'BillingViewArn': billing_group_arn
                      }
                  )
                  
                  return f"arn:aws:cur:us-east-1::report/{report_name}"
                  
              except Exception as e:
                  print(f"CUR creation error: {str(e)}")
                  raise

  # Custom Resource触发Lambda
  CreateLegacyCURExport:
    Type: Custom::CreateLegacyCURExport
    Properties:
      ServiceToken: !GetAtt CreateCURExportFunction.Arn
      BillingGroupArn: !Ref BillingGroupArn

Outputs:
  BucketName:
    Description: "Name of the S3 bucket for CUR data"
    Value: !GetAtt CreateLegacyCURExport.BucketName
    Export:
      Name: !Sub "${AWS::StackName}-CURBucketName"

  BucketRegion:
    Description: "Region of the S3 bucket"
    Value: !GetAtt CreateLegacyCURExport.BucketRegion
    Export:
      Name: !Sub "${AWS::StackName}-CURBucketRegion"

  ReportName:
    Description: "Name of the CUR report"
    Value: !GetAtt CreateLegacyCURExport.ReportName
    Export:
      Name: !Sub "${AWS::StackName}-CURReportName"

  CURArn:
    Description: "ARN of the CUR report"
    Value: !GetAtt CreateLegacyCURExport.CURArn
    Export:
      Name: !Sub "${AWS::StackName}-CURArn"